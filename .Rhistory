t.test(OJ_0.5-VC_0.5)$P
t.test(OJ_0.5-VC_0.5)$p-value
difference <- OJ_0.5 - VC_0.5
OJ_1 <- Tooth_Growth$len[Tooth_Growth$supp == "OJ" & Tooth_Growth$dose == 1]
VC_1 <- Tooth_Growth$len[Tooth_Growth$supp == "VC" & Tooth_Growth$dose == 1]
difference <- OJ_1 - VC_1
t.test(difference)
OJ_2 <- Tooth_Growth$len[Tooth_Growth$supp == "OJ" & Tooth_Growth$dose == 2]
VC_2 <- Tooth_Growth$len[Tooth_Growth$supp == "VC" & Tooth_Growth$dose == 2]
difference <- OJ_2 - VC_2
t.test(difference)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
model1 = train(y~.,data = vowel.train, method = "rf")
pred1 = predict(model1, vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
model1 = train(y~.,data = vowel.train, method = "rf")
library(caret)
set.seed(33833)
model1 = train(y~.,data = vowel.train, method = "rf")
model2 = train(y~.,data = vowel.train, method = "gbm")
model2 = train(y~.,data = vowel.train, method = "gbm")
pred1 = predict(model1, vowel.test)
pred2 = predict(model2, vowel.test)
pred1
confusionMatrix(pred1)
confusionMatrix(vowel.test$y,pred1)
confusionMatrix(vowel.test$y,pred2)
preddf = data.frame(pred1,pred2,y=vowel.test$y)
combpred = train(y~.,method = "gam", data = preddf)
library(mgcv)
combpred = train(y~.,method = "gam", data = preddf)
confusionMatrix(vowel.test$y,pred2)
confusionMatrix(vowel.test$y,combpred)
preddf = data.frame(pred1=pred1,pred2=pred2,y=vowel.test$y)
combpred = train(y~.,method = "gam", data = preddf)
confusionMatrix(vowel.test$y,combpred)
combdf = train(y~.,method = "gam", data = preddf)
pred3 = predict(combdf, preddf)
confusionMatrix(vowel.test$y,preddf)
library(gam)
install.packages("gam")
library(gam)
combdf = train(y~.,method = "gam", data = preddf)
warnings()
preddf = data.frame(pred1,pred2,vowel.test$y)
combdf = train(y~.,method = "gam", data = preddf)
preddf = data.frame(pred1,pred2,y = vowel.test$y)
combdf = train(factor(y)~.,method = "gam", data = preddf)
pred3 = predict(combdf, preddf)
confusionMatrix(vowel.test$y,preddf)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model1 = train(diagnosis~., method = "rf", data = training)
model2 = train(diagnosis~.,method = "gbm", data = training)
model3 = train(diagnosis~., method = "lda", data = training)
confusionMatrix(testing$diagnosis, predict(model1, testing))
confusionMatrix(testing$diagnosis, predict(model1, testing))$overall[1]
comb = data.frame(model1, model2, model3, testing$diagnosis)
comb = data.frame(model1= predict(model1, testing), model2 = predict(model2, testing), model3=predict(model3, testing), testing$diagnosis)
model4 = train(diagnosis~., method = "rf", data = comb)
model4 = train(diagnosis~., method = "rf", data = comb)
comb = data.frame(predict(model1, testing), predict(model2, testing), predict(model3, testing), testing$diagnosis)
model4 = train(comb$testing.diagnosis~., method = "rf", data = comb)
comb = data.frame(predict(model1, testing), predict(model2, testing), predict(model3, testing), diagnosis= testing$diagnosis)
model4 = train(diagnosis~., method = "rf", data = comb)
confusionMatrix(testing$diagnosis, predict(model4, testing))$overall[1]
model4 = train(diagnosis~., method = "rf",prox =T, data = comb)
confusionMatrix(testing$diagnosis, predict(model4, testing))$overall[1]
set.seed(62433)
model1 = train(diagnosis~., method = "rf",prox =T, data = training)
model2 = train(diagnosis~.,method = "gbm", data = training)
model3 = train(diagnosis~., method = "lda", data = training)
confusionMatrix(testing$diagnosis, predict(model1, testing))$overall[1]
confusionMatrix(testing$diagnosis, predict(model2, testing))$overall[1]
confusionMatrix(testing$diagnosis, predict(model3, testing))$overall[1]
comb = data.frame(predict(model1, testing), predict(model2, testing), predict(model3, testing), diagnosis= testing$diagnosis)
model4 = train(diagnosis~., method = "rf",prox =T, data = comb)
confusionMatrix(testing$diagnosis, predict(model4, testing))$overall[1]
confusionMatrix(pred1, pred2)
confusionMatrix(testing$diagnosis, predict(model1, testing))$overall[1]
pred = predict(model4, comb)
confusionMatrix( pred,testing$diagnosis)$overall[1]
confusionMatrix(testing$diagnosis, predict(model1, testing))$overall[1]
confusionMatrix(testing$diagnosis, predict(model2, testing))$overall[1]
confusionMatrix(testing$diagnosis, predict(model3, testing))$overall[1]
confusionMatrix( pred,testing$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?plot.enet
?plot.enet
install.packages("Lars")
install.packages("lars")
library(lars)
?plot.enet
library(enet)
install.packages("enet")
install.packages("elasticnet")
?plot.enet
??plot.enet
set.seed(233)
modellasso = train(training$CompressiveStrength~.,method = "glmnet")
modellasso = train(CompressiveStrength~.,method = "glmnet", data = training)
pred = predict(modellasso, testing)
confusionMatrix(pred,testing)
confusionMatrix(pred,testing$CompressiveStrength)
confusionMatrix(pred,testing$CompressiveStrength)
confusionMatrix(pred,testing$CompressiveStrength)
set.seed(233)
lassoFit <- train(CompressiveStrength ~.,  data = training,
method = "lasso")
pred = predict(lassoFit, testing)
confusionMatrix(pred,testing$CompressiveStrength)
plot(lassoFit, breaks=FALSE, cex = 0.75)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
head(training)
head(tstrain)
fit = bats(tstrain)
forc= forecast(fit, nrow(testing))
plot(forc)
forc
tser = predict(forc, testing)
confusionMatrix(testing$visitsTumblr, tser)
confusionMatrix( tser)
x = forc$lower[,2]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
fit = train(CompressiveStrength~., method ="svm", data = training)
fit = svm(CompressiveStrength~., data = training)
fit1 = train(fit, data = training)
set.seed(325)
fit = svm(CompressiveStrength~., data = training)
pre = predict(fit, testing)
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
testing <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
head(training)
head(training$classe)
summary(training)
which(is.na(training[,1:length(training)])
which(is.na(training[,1:length(training)]))
training[, is.na]
which (is.na(training))
names = training[,is.na(training[,1:160]))
names = training[,is.na(training[,1:160])]
names = training[,which(is.na(training[,1:160])]
is.na(training[,1:160])
summary(training)
complete.cases(training[,1:160])
x=na.omit(training)
remove(x)
x = for(j in 1:ncol(training) {
for i in 1:nrow(training) {
if training[i,j] != "NA"
break
else
print j
}
}
for (i in 1:nrow(training)) {
if training[i,j] != "NA"
break
else
print j
}
print(j)
x = for(j in 1:ncol(training) {
for (i in 1:nrow(training)) {
if training[i,j] != "NA"
break
else
print(j)
}
}
x = for(j in 1:ncol(training) {
for (i in 1:nrow(training)) {
if training[i,j] = "NA"
print(j)
}
}
print j
x = for(j in 1:ncol(training) {
for (i in 1:nrow(training)) {
if training[i,j] == "NA"
print j
}
}
print(j)
x = for(j in 1:ncol(training) {
for (i in 1:nrow(training)) {
if training[i,j] == "NA"
print(j)
}
}
x = for(j in 1:ncol(training) {
for (i in 1:nrow(training)) {
if (training[i,j] == "NA")
print(j)
}
}
complete.cases(training[,1:160])
x = for(j in 1:ncol(training) {
for (i in 1:nrow(training)) {
if (training[i,j] == "NA")
}
return(j)
}
x = for(j in 1:ncol(training) {
for (i in 1:nrow(training)) {
if (training[i,j] == "NA")
}
y = j
}
j = NULL
x = for(j in 1:ncol(training) {
for (i in 1:nrow(training)) {
if (training[i,j] == "NA")
}
y = j
}
x = for(j in 1:ncol(training)) {
for (i in 1:nrow(training)) {
if (training[i,j] == "NA")
}
y = j
}
x = for(j in 1:ncol(training)) {
for (i in 1:nrow(training)) {
if (training[i,j] == NULL)
}
y = j
}
x = for(j in 1:ncol(training)) {
for (i in 1:nrow(training)) {
if (training[i,j] == "NULL")
}
y = j
}
x = for(j in 1:ncol(training)) {
for (i in 1:nrow(training)) {
if (training[i,j] == "NULL")
y = j
}
}
remove(j)
y = NULL
x = for(j in 1:ncol(training)) {
for (i in 1:nrow(training)) {
if (training[i,j] == "NULL")
y = j
}
}
x = for(j in 1:ncol(training)) {
for (i in 1:nrow(training)) {
if (complete.cases(training[i,j]) == "NULL")
y = j
}
}
head(x)
x
training[,which(is.na)]
head(training)
training$classe <- as.factor(training$classe)
str(training)
test2 <- data.frame (matrix(c(1,2,3,NA,NA,NA,NA,NA,2), 3,3))
test2
colSums(test2)
colSums(training)
colSums(as.numeric(training))
colSums(training[,1:160])
colSums(numeric(training[,1:160]))
x= as.numeric(training)
colMeans(training)
summary(training)$null
summary(training)$NULL
class(test2)
unclass(test2)
colSums(test2)
x = unclass(training)
colSums(x)
rowSums(x)
table(x)
table(training)
x = nearZeroVar(training, saveMetrics = TRUE)
library(caret)
x = nearZeroVar(training, saveMetrics = TRUE)
head(x)
head(x,20)
x
length(x)
str(training)
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
str(training)
training$classe <- as.factor(training$classe)
library(caret)
round(prop.table(table(training$classe)), 2)
training[training == ""] <- NA
nul <- apply(training, 2, function(x) {sum(is.na(x))})
nul = nul //nrow(training)
nul = nul /nrow(training)
head(nul)
nul <- sapply(training, 2, function(x) {sum(is.na(x))})
nul <- lapply(training, 2, function(x) {sum(is.na(x))})
training <- training[!(nul>0.90)]
summary(trainingCl)
summary(training)
dim(training)
training <- training[!(nul>0.95)]
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
trainingy <- training[!(nul>0.95)]
trainingy <- training[!(nul>0.90)]
training <- training[!(nul>0.90)]
dim(training)[2]
str(training)
x = nearZeroVar(training, saveMetrics = TRUE)
x$nzv
y= training[, -x$nzv]
## Converting "classe" variable into factor
training$classe <- as.factor(training$classe)
round(prop.table(table(training$classe)), 2)
head(training)
training <- training[,-(1:7)]
corr_mat <- round(cor(training, method = "pearson"),1)
df2 <- training %>%
dplyr::select(-findCorrelation(corr_mat, cutoff = 0.9))
dim(df2)
library(dplyr)
corr_mat <- round(cor(training, method = "pearson"),1)
df2 <- training %>%
dplyr::select(-findCorrelation(corr_mat, cutoff = 0.9))
dim(df2)
corr_mat <- round(cor(training, method = "pearson"),1)
str(training)
corr_mat <- round(cor(training[,-"classe"], method = "pearson"),1)
corr_mat <- round(cor(training[,-("classe")], method = "pearson"),1)
corr_mat <- round(cor(training[,-53], method = "pearson"),1)
df2 <- training[,-53] %>%
dplyr::select(-findCorrelation(corr_mat, cutoff = 0.9))
dim(df2)
corrplot(corr_mat, tl.col = "black", method = "shade",type = "lower",mar=c(0,1,0,1), tl.srt = 40)
library()
corrplot(corr_mat, tl.col = "black", method = "shade",type = "lower",mar=c(0,1,0,1), tl.srt = 40)
library(corrplot)
corrplot(corr_mat, tl.col = "black", method = "shade",type = "lower",mar=c(0,1,0,1), tl.srt = 40)
training <- training %>%
dplyr::select(-findCorrelation(corr_mat, cutoff = 0.9))
dim(training)
str(training)
corr1 = round(cor(training[,-49], method = "pearson"),1)
corrplot(corr1, tl.col = "black", method = "shade",type = "lower",mar=c(0,1,0,1), tl.srt = 40)
q=training %>%
dplyr::select(-findCorrelation(corr1, cutoff = 0.9))
dim(training)
remove(q)
set.seed(1250)
intrain <- createDataPartition(y=training$classe, p=.70, list = FALSE)
trainingV <- data[intrain,]
testingV <- data[-intrain,]
trainingV <- training[intrain,]
testingV <- training[-intrain,]
testing = testing[!(nul>0.9)]
testing <- testing[,-x$nzv]
testing <- testing[,-(1:7)]
q =testing %>%
dplyr::select(-findCorrelation(corr_mat, cutoff = 0.9))
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
testing <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
training$classe <- as.factor(training$classe)
round(prop.table(table(training$classe)), 2)
training[training == ""] <- NA
nul <- apply(training, 2, function(x) {sum(is.na(x))})
nul <- nul /nrow(training)
training <- training[!(nul>0.90)]
testing <- testing[!(nul>0.9)]
remove(trainingy)
dim(training)
x <- nearZeroVar(training, saveMetrics = TRUE)
training <- training[, -x$nzv]
testing <- testing[,-x$nzv]
dim(training)
training <- training[,-(1:7)]
testing <- testing[,-(1:7)]
dim(training)
corr_mat <- round(cor(training[,-53], method = "pearson"),1)
head(training[,"classe"])
head(training[,!"classe"])
head(training[,-"classe"])
head(training[,-("classe")])
q = training[, -"classe"]
q = training[, -c("classe")]
q = training[, -classe]
corr_mat <- round(cor(training[,-52], method = "pearson"),1)
corrplot(corr_mat, tl.col = "black", method = "shade",type = "lower",mar=c(0,1,0,1), tl.srt = 40)
training <- training %>%
dplyr::select(-findCorrelation(corr_mat, cutoff = 0.9))
testing <-  testing %>%
dplyr::select(-findCorrelation(corr_mat, cutoff = 0.9))
dim(training)
set.seed(1250)
intrain <- createDataPartition(y=training$classe, p=.70, list = FALSE)
trainingV <- training[intrain,]
testingV <- training[-intrain,]
dim(trainingV)
dim(testingV)
q = preProcess(trainingV, method = "pca", prcomp =2)
q = preProcess(trainingV, method = "pca", thresh = 0.8)
q = preProcess(trainingV, method = "pca", thresh = 0.9)
q = preProcess(trainingV, method = "pca", prcomp =2)
plot(q, type="l", main = " ")
q = preProcess(trainingV[,-49], method = "pca", prcomp =2)
plot(q, type="l", main = " ")
PCA_Graph <- prcomp(trainingV[,-49], center = TRUE, scale = TRUE)
plot(PCA_Graph, type="l", main = " ")
summary(PCA_Graph)
q = preProcess(trainingV[,-49], method = "pca", prcomp =2)
summary(q)
q$rotation
preProc <- preProcess(trainingV[,-49],method="pca",thresh=.8)
summary(preProc$rotation)
preProc <- preProcess(trainingV[,-49],method="pca",thresh=.95)
summary(preProc$rotation)
preProc <- preProcess(trainingV[,-49],method="pca",thresh=.975)
summary(preProc$rotation)
preProc$rotation
plot(preProc, type="l", main = " ")
PCA <- prcomp(trainingV[,-49], center = TRUE, scale = TRUE, thresh = 0.975)
plot(preProc[,1], preProc[,2], type="l", main = " ")
preProc <- preProcess(trainingV[,-49],method="pca",thresh=.975)
preProc$rotation
summary(preProc$rotation)
q = preProcess(trainingV[,-49], method = "pca", prcomp =30)
summary(q)
summary(q$rotation)
q = preProcess(trainingV[,-49], method = "pca", prcomp =35)
summary(q$rotation)
nrow(q$rotation)
nrow(q)
preProc <- preProcess(trainingV[,-49],method="pca",thresh=.95)
summary(preProc$rotation)
summary(q$rotation)
PCA <- preProcess(trainingV[,-49],method="pca",thresh=.95)
trainingPCA <- predict(PCA,trainingV[,-49])
plot(trainingPCA[,1], trainingPCA[,2])
plot(trainingPCA[,1], trainingPCA[,2], col = trainingV$classe)
plot(x = trainingPCA[,1],y= trainingPCA[,2], col = trainingV$classe)
model_dt <- train(classe~., data = trainingPCA, method = "rpart")
model_dt <- train(trainingV$classe~., data = trainingPCA, method = "rpart")
PCA <- prcomp(trainingV, center = TRUE, scale = TRUE)
plot(PCA, type="l", main = " ")
PCA <- prcomp(trainingV[,-49], center = TRUE, scale = TRUE)
plot(PCA, type="l", main = " ")
grid(nx = 10, ny = 14)
title(main = "Principal components Analysis", sub = NULL, xlab = "Components")
box()
summary(PCA)
fitControl <- trainControl(method="cv",
number = 5,
preProcOptions = list(thresh = 0.975),
classProbs = TRUE,
summaryFunction = twoClassSummary)
model_dt <- train(classe~., data = trainingV, method = "rpart", trace=FALSE,
trControl=fitControl)
fitControl <- trainControl(method="cv",
number = 5,
preProcOptions = list(thresh = 0.975),
classProbs = TRUE,
summaryFunction = fiveClassSummary)
fitControl <- trainControl(method="cv",
number = 5,
preProcOptions = list(thresh = 0.975),
classProbs = TRUE)
model_dt <- train(classe~., data = trainingV, method = "rpart", trace=FALSE,
trControl=fitControl)
model_dt <- train(classe~., data = trainingV, method = "class", trace=FALSE,
trControl=fitControl)
model_dt <- train(classe~., data = trainingV, method = "rpart", trace=FALSE,
trControl=fitControl)
summary(trainingV)
is.na(trainingV)
summary(trainingV)
q = lm(classe~., data = trainingV)
setwd("C:/Users/aravi/Desktop/R coursera/course 8")
library(magrittr)
library(pROC)
